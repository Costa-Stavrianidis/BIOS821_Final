"""Create parsing functions to make SQLite tables."""

import sqlite3

con = sqlite3.connect("restaurant.db")


def parse_durham_data(filename: str) -> None:
    """Read the file and parse the data files into a SQLite table."""
    cur = con.cursor()
    cur.execute(
        "CREATE TABLE IF NOT EXISTS Durham([Name] TEXT PRIMARY KEY, [Latitude] FLOAT, [Longitude] FLOAT, [VeganFriendly] BINARY, [Delivery] BINARY, [Curbside] BINARY, [PetFriendly] BINARY, [LargeParty] BINARY, [Catering] BINARY, [CuisineType] TEXT, [RestaurantType] TEXT, [OpeningTime] TEXT, [ClosingTime] TEXT, [Rating] FLOAT, [PriceLevel] TEXT)"
    )  # O(1)
    with open(filename, encoding="utf-8-sig") as p:  # O(1)
        lines = p.readlines()  # O(1)
        col_name = []  # O(1)
        first_row = True  # O(1)
        for line in lines:  # O(N)
            line = line.strip()  # O(1)
            if first_row:  # O(1)
                col_name = line.split()  # O(1)
                first_row = False  # O(1)
            elif not first_row:  # O(1)
                dic = {}  # O(1)
                dat = line.split("\t")  # O(1)
                for count, ele in enumerate(dat, 0):  # O(M)
                    dic[col_name[count]] = dat[count]  # O(1)
                lst = [
                    dic["Name"],
                    dic["Latitude"],
                    dic["Longitude"],
                    dic["VeganFriendly"],
                    dic["Delivery"],
                    dic["Curbside"],
                    dic["PetFriendly"],
                    dic["LargeParty"],
                    dic["Catering"],
                    dic["CuisineType"],
                    dic["RestaurantType"],
                    dic["OpeningTime"],
                    dic["ClosingTime"],
                    dic["Rating"],
                    dic["PriceLevel"],
                ]  # O(15)
                cur.execute(
                    "INSERT or REPLACE INTO Durham VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                    lst,
                )  # O(1)
    return
    # The function has computational complexity 0(NM)


def parse_comments_data(filename: str) -> None:
    """Read the file and parse the data files into a SQLite table."""
    cur = con.cursor()
    cur.execute(
        "CREATE TABLE IF NOT EXISTS Comments([Name] TEXT, [Comments] TEXT)"
    )  # O(1)
    with open(filename, encoding="utf-8-sig") as p:  # O(1)
        lines = p.readlines()  # O(1)
        col_name = []  # O(1)
        first_row = True  # O(1)
        for line in lines:  # O(N)
            line = line.strip()  # O(1)
            if first_row:  # O(1)
                col_name = line.split()  # O(1)
                first_row = False  # O(1)
            elif not first_row:  # O(1)
                dic = {}  # O(1)
                dat = line.split("\t")  # O(1)
                for count, ele in enumerate(dat, 0):  # O(M)
                    dic[col_name[count]] = dat[count]  # O(1)
                lst = [
                    dic["Name"],
                    dic["Comments"],
                ]  # O(2)
                cur.execute(
                    "INSERT or REPLACE INTO Comments VALUES (?, ?)", lst
                )  # O(1)
    return
